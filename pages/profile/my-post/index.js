import React from 'react'
import Head from 'next/head'
import Header from '../../../components/Header'
import styles from '../../../styles/profile.module.css'
import Image from 'next/image'
import { Avatar, Center, Container, Spinner, useToast, Tabs, Tag, Tab, TabPanel, TabList, TabPanels, Heading } from '@chakra-ui/react'
import Link from 'next/link'
import useAuth from '../../../components/authentication/hooks/useAuth'
import { useQuery } from '@tanstack/react-query'
import PostsService from '../../../services/posts/posts.service'
import ContributorGuard from '../../../components/authentication/guards/ContributorGuard'


const Published = () => {
    const { userData } = useAuth();
    const toast = useToast();
    const { isLoading: draftsLoading, data: draftsData } = useQuery({
        queryKey: ['drafts', userData?.id], queryFn: async () => {
            return await PostsService.getDraftsByUserId(userData?.id);
        }, onSuccess: (data) => {
            //console.log(data)
        },
        onError: (error) => {
            toast({
                title: "Error",
                description: "Error fetching posts. Please refresh the page",
                status: "error",
                duration: 9000,
                isClosable: true,
            })
        },
    }
    )
    const { isLoading: unpublishedLoading, data: unpublishedData } = useQuery({
        queryKey: ['unpublished-posts', userData?.id], queryFn: async () => {
            //console.log(userData?.id)
            return await PostsService.getUnpublishedPostsByUserId(userData?.id)
        }, onSuccess: (data) => {
            //console.log(data)
        },
        onError: (error) => {
            toast({
                title: "Error",
                description: "Error fetching posts. Please refresh the page",
                status: "error",
                duration: 9000,
                isClosable: true,
            })
        },
    },
    )
    const { isLoading, data } = useQuery({
        queryKey: ['published-posts', userData?.id], queryFn: async () => {
            return await PostsService.getPublishedPostsByUserId(userData?.id)
        }, onSuccess: (data) => {
        },
        onError: (error) => {
            toast({
                title: "Error",
                description: "Error fetching posts. Please refresh the page",
                status: "error",
                duration: 9000,
                isClosable: true,
            })
        },
    },
    )
    return (
        <ContributorGuard>
            <div className={styles.profile}>
                <Head>
                    <title>XRAtlas</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/xr.jpeg" />
                    <link rel="preconnect" href="https://fonts.googleapis.com" />
                    <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin='true' />
                </Head>
                <main className={styles.main}>
                    <Header />
                    <Container maxW="950px" mt="6">
                        <div className={styles.wrapper}>
                            <div className={styles.title}>
                                <Heading>My Posts</Heading>
                                <Link href="/profile/create">
                                    <button>
                                        <Image src="/sign.svg" width="14" height="14" alt="" />
                                        New post
                                    </button>
                                </Link>
                            </div>
                            <Tabs colorScheme={"pink"}>
                                <TabList>
                                    <Tab>
                                        Published
                                        <Tag ml={"2"} size="sm" borderRadius="full" background={"#F40580"} color="whiteAlpha.900">2</Tag>
                                    </Tab>
                                    <Tab>
                                        Unpublished
                                        <Tag ml={"2"} size="sm" borderRadius="full" background={"#F40580"} color="whiteAlpha.900">2</Tag>
                                    </Tab>
                                    <Tab>
                                        Drafts
                                        <Tag ml={"2"} size="sm" borderRadius="full" background={"#F40580"} color="whiteAlpha.900">2</Tag>
                                    </Tab>
                                </TabList>
                                <TabPanels>
                                    <TabPanel>
                                        <div className={styles.list}>
                                            {
                                                isLoading && (
                                                    <Center>
                                                        <Spinner />
                                                    </Center>
                                                )
                                            }

                                            {
                                                data && data.map((post, index) => {
                                                    return (
                                                        <Link href={`my-post/edit-post/${post.id}`} key={index}>
                                                            <div className={styles.newsletter}>
                                                                <div className={styles.content}>
                                                                    <div className={styles.text}>
                                                                        <h3>{post.title}</h3>
                                                                        {post?.description ?
                                                                            <p>{post.description}...</p>
                                                                            :
                                                                            <p>{post.contentText ? post.contentText.substring(0, 290) : "No description"}...</p>

                                                                        }
                                                                    </div>
                                                                    <div className={styles.author}>
                                                                        <Avatar size={"sm"} src={userData?.profileImageUrl} />
                                                                        <p style={{ textTransform: "capitalize" }}>{userData?.displayName}<span> Â· {post.readMinutes} mins read</span></p>
                                                                    </div>
                                                                </div>
                                                                <div className={styles.photo}>
                                                                    <img src={post.thumbnailUrl} width={"140px"} height={"140px"} alt="" />
                                                                </div>
                                                            </div>
                                                        </Link>
                                                    )
                                                })
                                            }
                                        </div>
                                    </TabPanel>
                                    <TabPanel>
                                        <div className={styles.list}>
                                            {
                                                unpublishedLoading && (
                                                    <Center>
                                                        <Spinner />
                                                    </Center>
                                                )
                                            }
                                            {
                                                unpublishedData && unpublishedData.length < 1 &&
                                                <Center>
                                                    Nothing to see here...
                                                </Center>
                                            }
                                            {
                                                unpublishedData && unpublishedData.map((post, index) => {
                                                    return (
                                                        <Link href={`my-post/edit-post/${post.id}`} key={index}>
                                                            <div className={styles.newsletter}>
                                                                <div className={styles.content}>
                                                                    <div className={styles.text}>
                                                                        <h3>{post.title}</h3>
                                                                        {post?.description ?
                                                                            <p>{post.description}...</p>
                                                                            :
                                                                            <p>{post.contentText ? post.contentText.substring(0, 290) : "No description"}...</p>

                                                                        }
                                                                    </div>
                                                                    <div className={styles.author}>
                                                                        <Avatar size={"sm"} src={userData?.profileImageUrl} />
                                                                        <p style={{ textTransform: "capitalize" }}>{userData?.displayName}{!post.readMinutes < 1 ? <span> Â· {post.readMinutes} mins read</span> : <span> Â· {"<"} 1 mins read</span>}</p>
                                                                    </div>
                                                                </div>
                                                                <div className={styles.photo}>
                                                                    <img src={post.thumbnailUrl} width={"140px"} height={"140px"} alt="" />
                                                                </div>
                                                            </div>
                                                        </Link>
                                                    )
                                                })
                                            }
                                        </div>
                                    </TabPanel>
                                    <TabPanel>
                                        <div className={styles.list}>
                                            {
                                                draftsLoading && (
                                                    <Center>
                                                        <Spinner />
                                                    </Center>
                                                )
                                            }
                                            {
                                                draftsData && draftsData.map((post, index) => {
                                                    return (
                                                        <Link href={`my-post/edit-post/${post.id}`} key={index}>
                                                            <div className={styles.newsletter}>
                                                                <div className={styles.content}>
                                                                    <div className={styles.text}>
                                                                        <h3>{post.title}</h3>
                                                                        {post?.description ?
                                                                            <p>{post.description}...</p>
                                                                            :
                                                                            <p>{post.contentText ? post.contentText.substring(0, 290) : "No description"}...</p>

                                                                        }
                                                                    </div>
                                                                    <div className={styles.author}>
                                                                        <Avatar size={"sm"} src={userData?.profileImageUrl} />
                                                                        <p style={{ textTransform: "capitalize" }}>{userData?.displayName}<span> Â· {post.readMinutes} mins read</span></p>
                                                                    </div>
                                                                </div>
                                                                <div className={styles.photo}>
                                                                    {
                                                                        post.thumbnailUrl
                                                                            ?
                                                                            <img src={post.thumbnailUrl} width={"140px"} height={"140px"} alt="Nothing" />
                                                                            : <img src={post.thumbnailUrl} width={"140px"} height={"140px"} alt="No thumbnail available for drafts" />
                                                                    }
                                                                </div>
                                                            </div>
                                                        </Link>
                                                    )
                                                })
                                            }
                                        </div>
                                    </TabPanel>
                                </TabPanels>
                            </Tabs>
                        </div>
                    </Container>
                </main>
            </div>
        </ContributorGuard>
    )
}

export default Published;