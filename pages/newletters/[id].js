import Head from 'next/head'
import Image from 'next/image';
import { useRouter } from 'next/router'
import { motion, useScroll, useSpring } from "framer-motion";
import styles from '../../styles/Newsletters.module.css';
import Header from '../../components/Header';
import RecentNewsletter from '../../components/RecentNewsletter';
import Footer from '../../components/Footer';
import axios from 'axios';
import { months, weekday } from '../../utils/monthList';

const data = {
  title : "Related topics",
}

const Preview = ({ post }) => {

  const router = useRouter();
  const { id } = router.query;
  const { scrollYProgress } = useScroll();
  const scaleX = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001
  });

  const currentPost = post.filter(item => item._id === id);

  return (
    <div className={styles.newletters}>
      <Head>
          <title>XRAtlas</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/xr.jpeg" />
          <link rel="preconnect" href="https://fonts.googleapis.com"/>
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin='true'/>
      </Head>
      <main className={styles.preview_wrapper}>
        <motion.div className={styles.progress_bar} style={{ scaleX }} />
        <Header />
        <div className={styles.c}>
          {
            currentPost && currentPost.map(({_id, postAuthor, createdAt, postContent, postName, postLength, postUrl}) => {

              const newDate = new Date(createdAt);
              const [month, day, year, dy] = [newDate.getMonth(), newDate.getDate(), newDate.getFullYear(), newDate.getDay()];

              const newWord = postContent.split("\n");
              return(
                  <div className={styles.preview} key={_id}>
                    <div className={styles.author}>
                        <img src='/virtual.jpeg' width={30} height={30} alt="avatar"/>
                        <p>{postAuthor}</p>
                        <p><span>{`${weekday[dy]} ${day} ${months[month]} ${year} `}</span></p>
                    </div>
                    <div className={styles.title}>
                      <h3>{postName}</h3>
                    </div>
                    {
                      postUrl && <img src={postUrl} width={800} height={300} alt="figure" className={styles.articleimg}/>
                    }
                    {
                      !postUrl && <Image src='/femalegoogle.svg'width={800} height={300} alt="figure" className={styles.articleimg}/>
                    }
                    <div className={styles.writeup}>
                      {/* <h4>Intro</h4> */}
                      <div>
                        {
                          newWord.map(element => {
                            return(
                              <p>{element}</p>
                            )
                          })
                        }
                        </div>
                    </div>
                  </div>
              )
            })
          }
            <div className={styles.related}>
              <RecentNewsletter data={data}/>
              <Footer />
            </div>
        </div>
      </main>
    </div>
  )
}

export default Preview

export async function getStaticPaths(){
  return{
    paths : [
      {
        params : { id : '6394f64794f20e001e344486'}
      },
      {
        params : { id : '6393b80470c23f001efc597c'}
      },
      {
        params : { id : '6394cd0470c23f001efc59d9'}
      },
      {
        params : { id : '6394d03170c23f001efc59ea'}
      },
      {
        params : { id : '6394d16370c23f001efc59f2'}
      },
      {
        params : { id : '6394d27a70c23f001efc59f8'}
      },
    ],
    fallback : false
  }
}

export async function getStaticProps(){
  try {
      const data = await axios.get('https://xr-speeds-production.up.railway.app')
      const result = data.data; 
      return { 
          props : { post : result }
       }
       
    } catch (error) {
        console.log(error)
    }
}